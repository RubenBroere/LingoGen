namespace LingoGen.Generator;

public class ClassBuilder
{
    private readonly string _className;
    private readonly string _namespace;

    private bool _isStatic;
    private bool _isPartial;

    private string? _summary;
    private string? _body;

    private string Summary =>
        $"""
         
         /// <summary>
         /// {_summary}
         /// </summary>
         """;

    private string Class =>
        $$"""
          // <auto-generated/>

          {{String.Join("\n", _usingDeclarations.Select(u => $"using {u};"))}}

          namespace {{_namespace}};
          {{(_summary != null ? Summary : "")}}
          public {{(_isStatic ? "static" : "")}} {{(_isPartial ? "partial" : "")}} class {{_className}}
          {
          {{_body}}
          };
          """;

    private readonly List<string> _usingDeclarations = [];

    private ClassBuilder(string className, string ns)
    {
        _className = className;
        _namespace = ns;
    }

    public static ClassBuilder Create(string className, string @namespace)
    {
        return new(className, @namespace);
    }

    public ClassBuilder AsStatic()
    {
        _isStatic = true;
        return this;
    }

    public ClassBuilder AsPartial()
    {
        _isPartial = true;
        return this;
    }

    public ClassBuilder AddUsings(params string[] usings)
    {
        _usingDeclarations.AddRange(usings);
        return this;
    }

    public ClassBuilder WithSummary(string summary)
    {
        _summary = summary;
        return this;
    }

    public ClassBuilder AddBody(string body)
    {
        _body = body;
        return this;
    }

    public override string ToString()
    {
        return Class;
    }
}