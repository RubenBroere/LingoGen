using System.Text;

namespace LingoGen.Generator;

public class ClassBuilder
{
    private readonly string _className;
    private readonly string _namespace;

    private bool _isStatic;
    private bool _isPartial;

    private string? _summary;
    private string? _body;

    private readonly List<string> _usingDeclarations = [];

    private ClassBuilder(string className, string ns)
    {
        _className = className;
        _namespace = ns;
    }

    public static ClassBuilder Create(string className, string @namespace)
    {
        return new(className, @namespace);
    }

    public ClassBuilder AsStatic()
    {
        _isStatic = true;
        return this;
    }

    public ClassBuilder AsPartial()
    {
        _isPartial = true;
        return this;
    }

    public ClassBuilder AddUsings(params string[] usings)
    {
        _usingDeclarations.AddRange(usings);
        return this;
    }

    public ClassBuilder WithSummary(string summary)
    {
        _summary = summary;
        return this;
    }

    public ClassBuilder AddBody(string body)
    {
        _body = body;
        return this;
    }

    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine();

        foreach (var @using in _usingDeclarations)
        {
            sb.Append("using ").Append(@using).AppendLine(";");
        }

        sb.AppendLine();
        
        sb.Append("namespace ").Append(_namespace).AppendLine(";");

        sb.AppendLine();
        
        if (_summary != null)
        {
            sb.AppendLine("/// <summary>");
            sb.Append("/// ").AppendLine(_summary);
            sb.AppendLine("/// </summary>");
        }


        sb.Append("public ");
        if (_isStatic)
        {
            sb.Append("static ");
        }
        if (_isPartial)
        {
            sb.Append("partial ");
        }

        sb.Append("class ").AppendLine(_className);
        
        sb.AppendLine("{");
        
        sb.AppendLine(_body);
        
        sb.AppendLine("}");
        
        return sb.ToString();
    }
}