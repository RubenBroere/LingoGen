using LingoGen.Generator.DataTypes;

namespace LingoGen.Generator;

public static class LingoClass
{
    public static string BuildPhrase(LingoPhrase phrase)
    {
        var sb = new SourceBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Globalization;");
        sb.AppendLine();
        sb.AppendLine($"namespace {Classes.Namespace}");
        using (sb.EnterBlock())
        {
            sb.AppendLine("public partial class PhraseCollection");
            using (sb.EnterBlock())
            {
                var hasArguments = phrase.Arguments.Count > 0;
                var parameters = hasArguments ? $"({String.Join(", ", phrase.Arguments.Select(x => $"string {x}"))})" : "";

                // Public property
                sb.AppendLine("/// <summary>");
                sb.AppendLine($"/// {phrase.Translations["en"]}");
                sb.AppendLine("/// </summary>");
                sb.AppendLine(hasArguments
                    ? $"public Content {phrase.Key}{parameters} => new {phrase.Key}Content({String.Join(", ", phrase.Arguments)});"
                    : $"public Content {phrase.Key} {{ get; }} = new {phrase.Key}Content();");
                sb.AppendLine();

                BuildContentClass(sb, phrase.Key, phrase.Translations, parameters);
            }
        }

        return sb.ToString();
    }

    public static string BuildNoun(LingoNoun noun)
    {
        var singularCapitalized = noun.Singular.ToDictionary(x => x.Key, x => x.Value.Capitalize());
        var pluralCapitalized = noun.Plural.ToDictionary(x => x.Key, x => x.Value.Capitalize());

        var sb = new SourceBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();

        sb.AppendLine("using System;");
        sb.AppendLine("using System.Globalization;");
        sb.AppendLine();

        sb.AppendLine($"namespace {Classes.Namespace}");
        using (sb.EnterBlock())
        {
            sb.AppendLine("public partial class NounCollection");
            using (sb.EnterBlock())
            {
                // Public property
                sb.AppendLine("/// <summary>");
                sb.AppendLine($"/// {singularCapitalized["en"]} | {pluralCapitalized["en"]}");
                sb.AppendLine("/// </summary>");
                sb.AppendLine($"public Noun {noun.Key} {{ get; }} = new {noun.Key}Noun();");
                sb.AppendLine();

                // Noun class
                sb.AppendLine($"private sealed class {noun.Key}Noun : Noun");
                using (sb.EnterBlock())
                {
                    // Properties
                    BuildContentProperty(sb, "Singular", $"{noun.Key}Singular", noun.Singular["en"]);
                    sb.AppendLine();

                    BuildContentProperty(sb, "SingularCapitalized", $"{noun.Key}SingularCapitalized", singularCapitalized["en"]);
                    sb.AppendLine();

                    BuildContentProperty(sb, "Plural", $"{noun.Key}Plural", noun.Plural["en"]);
                    sb.AppendLine();

                    BuildContentProperty(sb, "PluralCapitalized", $"{noun.Key}PluralCapitalized", pluralCapitalized["en"]);
                    sb.AppendLine();

                    BuildContentClass(sb, $"{noun.Key}Singular", noun.Singular, "");
                    sb.AppendLine();

                    BuildContentClass(sb, $"{noun.Key}SingularCapitalized", singularCapitalized, "");
                    sb.AppendLine();

                    BuildContentClass(sb, $"{noun.Key}Plural", noun.Plural, "");
                    sb.AppendLine();

                    BuildContentClass(sb, $"{noun.Key}PluralCapitalized", pluralCapitalized, "");
                    sb.AppendLine();
                }
            }
        }

        return sb.ToString();
    }

    private static void BuildContentProperty(SourceBuilder sb, string key, string contentName, string summary)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// {summary}");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"public override Content {key} {{ get; }} = new {contentName}Content();");
    }

    private static void BuildContentClass(SourceBuilder sb, string key, Dictionary<string, string> translations, string parameters)
    {
        var formatter = parameters.Length > 0 ? "$" : "";

        // Content class
        sb.AppendLine($"private sealed class {key}Content{parameters} : Content");
        using (sb.EnterBlock())
        {
            // Switch statement 
            sb.AppendLine("public override string? ToString(string languageCode) => languageCode switch");
            using (sb.EnterIndentedRegion("{", "};"))
            {
                // Translations
                foreach (var translation in translations)
                {
                    sb.AppendLine($"\"{translation.Key}\" => {formatter}\"{translation.Value}\",");
                }

                // Default
                sb.AppendLine("_ => null");
            }
        }
    }
}