using LingoGen.Generator.DataTypes;

namespace LingoGen.Generator;

public static class LingoClass
{
    public static string BuildPhrase(LingoPhrase phrase)
    {
        var sb = new SourceBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Globalization;");
        sb.AppendLine();
        sb.AppendLine($"namespace {Classes.Namespace}");
        using (sb.EnterBlock())
        {
            sb.AppendLine("public static partial class Lingo");
            using (sb.EnterBlock())
            {
                var parameters = phrase.Arguments.Count > 0 ? $"({String.Join(", ", phrase.Arguments.Select(x => $"string {x}"))})" : "";
                var formatter = phrase.Arguments.Count > 0 ? "$" : "";

                // Public static property
                sb.AppendLine("/// <summary>");
                sb.AppendLine($"/// {phrase.Translations["en"]}");
                sb.AppendLine("/// </summary>");
                sb.AppendLine(phrase.Arguments.Count > 0
                    ? $"public static Content {phrase.Key}{parameters} => new {phrase.Key}Content({String.Join(", ", phrase.Arguments)});"
                    : $"public static Content {phrase.Key} {{ get; }} = new {phrase.Key}Content();");

                sb.AppendLine();

                // Content class
                sb.AppendLine($"private sealed class {phrase.Key}Content{parameters} : Content");
                using (sb.EnterBlock())
                {
                    // Switch statement 
                    sb.AppendLine("public override string? ToString(string languageCode) => languageCode switch");
                    using (sb.EnterIndentedRegion("{", "};"))
                    {
                        // Translations
                        foreach (var translation in phrase.Translations)
                        {
                            sb.AppendLine($"\"{translation.Key}\" => {formatter}\"{translation.Value}\",");
                        }

                        // Default
                        sb.AppendLine("_ => null");
                    }
                }
            }
        }

        return sb.ToString();
    }
}