using System.IO;
using Microsoft.CodeAnalysis;

namespace LingoGen;

[Generator]
public class LingoGenerator : IIncrementalGenerator
{
    public const string Namespace = "LingoGen";

    private static string TranslationSourceCode =>
        $$"""
          // <auto-generated/>

          using System.Globalization;

          namespace {{Namespace}};

          /// <summary>
          /// Static class containing all lingo entries.
          /// </summary>
          public static partial class Lingo
          {

          }
          """;

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Initialize the compilation with the lingo class 
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Lingo.g.cs", TranslationSourceCode));

        // Cache file contents
        var lingoFiles = context.AdditionalTextsProvider
            .Where(static additionalText => Path.GetFileName(additionalText.Path) == "lingo.json")
            .Select(static (additionalText, ct) => additionalText.GetText(ct)?.ToString())
            .Where(static text => text is not null);

        // Cache lingo entries
        var lingoEntries = LingoEntryParser.ParseLingo(lingoFiles!);


        context.RegisterSourceOutput(lingoEntries, GenerateCode);
    }

    private static void GenerateCode(SourceProductionContext ctx, LingoEntry entry)
    {
        var source = LingoClass.Build(entry.Path, entry.Translations);
        ctx.AddSource($"Lingo.{entry.Path}.g.cs", source);
    }
}