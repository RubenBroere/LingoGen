using System.Linq;
using System.Text;
using LingoGen.DataTypes;

namespace LingoGen;

public static class LingoClass
{
    private const string Header =
        $$"""
          // <auto-generated/>

          using System;
          using System.Globalization;

          namespace {{LingoGenerator.Namespace}};

          public static partial class Lingo
          {
          """;

    public static string Build(LingoEntry entry, string filePath)
    {
        var collections = entry.FullPath.Split('.').ToList();
        var sb = new StringBuilder(Header);
        sb.AppendLine();

        const string tabSize = "    ";
        var indent = tabSize;

        // Collection class declarations
        for (var i = 0; i < collections.Count - 1; i++)
        {
            sb.AppendLine(indent + "public static partial class " + collections[i]);
            sb.AppendLine(indent + "{");

            indent += tabSize;
        }

        var key = collections.Last();

        // Method declaration
        sb.AppendLine(indent + "public static string " + key + " => CultureInfo.CurrentUICulture.TwoLetterISOLanguageName switch");
        sb.AppendLine(indent + "{");

        indent += tabSize;

        // Translations
        foreach (var translation in entry.Translations)
        {
            sb.AppendLine(indent + $"\"{translation.Key}\" => \"{translation.Value}\",");
        }

        // Default
        sb.AppendLine(indent + "_ => $\"[ No '" + key + "' lingo for '{CultureInfo.CurrentUICulture.TwoLetterISOLanguageName}' ]\"");
        sb.AppendLine(new string(' ', collections.Count * 4) + "};");

        // Class closing brackets
        for (var i = collections.Count - 1; i > -1; i--)
        {
            sb.AppendLine(new string(' ', 4 * i) + "}");
        }

        return sb.ToString();
    }
}